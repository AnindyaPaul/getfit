{
  "name": "Getfit",
  "tagline": "Buy fitness products.",
  "body": "GetFit is an online shop where you can buy fitness products like apparels, accessories and supplements - all by ordering from your home. It is the result of an educational effort to learn and implement different aspects of web engineering. The main goal in this project was to implement 3-tier architecture rather than focusing on features.\r\n\r\n## Screenshots\r\n![Shop](http://i.imgur.com/visSMg5.png)\r\n![Enter](http://i.imgur.com/nAbUGfC.png)\r\n![Profile](http://i.imgur.com/eAutFrb.png)\r\n![Cart](http://i.imgur.com/6JbeRBV.png)\r\n![Checkout](http://i.imgur.com/YWgee6Y.png)\r\n\r\n## 3-tier architecture\r\nBeing a project of the web engineering course project, our main goal was to focus on building the platform following the 3-tier architecture. So we didn't implement many features. Rather our application has a true 3-tier design. Here's an overview of the 3-tier architecture.\r\n\r\n    Presentation Layer <> Logic Layer <> Data Access Layer <> Database\r\n\r\nSo the philosophy is that the presentation layer only knows about the logic layer and has no idea about the database. The logic layer accepts requests from the user. It then decides what information is needed to serve the user. Based on that, it queries all the data from the data access layer. The data access layer communicates directly with the database. So the user never knows where the database is. The logic layer can be in one server, data access layer in another, database in another. \r\n\r\n## Implementation\r\nThe web application is built using the [python django framework](https://www.djangoproject.com/). However the django framework by default is only an MVC framework. Our main goal was to implement 3-tier architecture. So we had come up with some creative ideas.\r\n\r\nWe created two django projects. One for the logic layer, another for the data access layer. The logic layer receives requests. It has no models. All the models reside in the data access layer. The database is created accordingly. The two servers are configured in apache. We have two sites enabled at two different ports. The two ports serve the two applications.\r\n\r\nThe logic layer makes http request to the data access layer via the post method. Data access layer extracts the query and then retrieves data from database, converts the data into an xml file and sends the data back to the logic layer via http response. The logic layer parses the data and generates page for the user.\r\n\r\nSince the layers communicate using the http request and response and the data is transferred in xml format, the two servers are actually language and platform independent. We can implement the data access layer in another language if we want. The server just needs to accept http request and send back http response according to the query. The platform doesn't matter here.\r\n\r\n## Features\r\n* 3 Tier architecture\r\n* Language independent layers\r\n* Data transfer in xml format\r\n* Password stored by hashing\r\n* Email verification enabled\r\n\r\n## Conclusion\r\nIt is by no means a complete project. There are lots of bugs and the project is incomplete in many different ways. However the main purpose of implementing a 3-tier architecture was carried out properly.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}